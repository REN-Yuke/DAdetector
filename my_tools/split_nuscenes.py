import os
import random
import json

import mmcv


def split_scenes(json_path,
                 py_path=None,
                 train_proportion=0.7,
                 test_proportion=0.15, ):
    """Load the json generated by filter_nuscenes.py and split the scenes list
    to 3 list: train, val, test.
    There are no intersection among these 3 sub-aggregates.

    :param json_path: The json file saving the filtered scenes as total scenes.
    :param py_path: Path of the output py file.
                    Defaults to change expanded-name of json_path to .py.
    :param train_proportion: Proportion of train set. Value ranges in [0,1], and
                             train_proportion + test_proportion <= 1.
    :param test_proportion: Proportion of test set. Value ranges in [0,1], and
                            train_proportion + test_proportion <= 1.
    :return: The output py file to save 3 scene list: train, val, test.
    """
    # load .json file that contains filtered scenes list by mmcv
    saved_data = mmcv.load(json_path)
    # load .json file that contains filtered scenes list by json
    # with open(json_path) as json_file:
    #     saved_data = json.load(json_file)

    filtered_scenes = saved_data['filtered_scenes']
    num_filtered_scenes = saved_data['num_filtered_scenes']
    num_train_scenes = round(train_proportion * num_filtered_scenes)
    num_test_scenes = round(test_proportion * num_filtered_scenes)
    num_val_scenes = num_filtered_scenes - num_train_scenes - num_test_scenes

    index = list(range(0, num_filtered_scenes, 1))
    random.seed(7)
    random.shuffle(index)

    train_scenes = list(sorted(set(
        filtered_scenes[_] for _ in index[:num_train_scenes])))
    val_scenes = list(sorted(set(
        filtered_scenes[_] for _ in index[num_train_scenes:num_train_scenes + num_val_scenes])))
    test_scenes = list(sorted(set(
        filtered_scenes[_] for _ in index[num_train_scenes + num_val_scenes:num_filtered_scenes])))

    # Defaults to change expanded-name of json_path to .py as the output file
    if py_path is None:
        py_path = os.path.splitext(json_path)[0] + '.py'

    # reform the format of scene list
    with open(py_path, 'w') as output_file:
        # write scenes of train set
        output_file.write('train = \ \n\t[')
        for i in range(num_train_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + train_scenes[i] + "'")
            if i != num_train_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')

        # write scenes of val set
        output_file.write('val = \ \n\t[')
        for i in range(num_val_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + val_scenes[i] + "'")
            if i != num_val_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')

        # write scenes of test set
        output_file.write('test = \ \n\t[')
        for i in range(num_test_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + test_scenes[i] + "'")
            if i != num_test_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')


def plan0(daytime_no_rain_json, daytime_raining_json, output_path):
    """Baseline.
    Train set: daytime without rain in official trainval set(602 scenes/24134samples),
    when training only use clear images.

    Test set: daytime raining in official trainval set(149 scenes/6028samples),
    when testing only use raining images.

    :param daytime_no_rain_json: The json file saved daytime without rain
                                 scenes generated by filter_nuscenes.py
    :param daytime_raining_json: The json file saved daytime raining scenes
                                 generated by filter_nuscenes.py
    :param output_path: Path of output py file.
    :return: The output py file saved 2 scene list: train, test.
    """
    daytime_no_rain_data = mmcv.load(daytime_no_rain_json)
    daytime_raining_data = mmcv.load(daytime_raining_json)

    train_scenes = daytime_no_rain_data['filtered_scenes']
    num_train_scenes = daytime_no_rain_data['num_filtered_scenes']

    test_scenes = daytime_raining_data['filtered_scenes']
    num_test_scenes = daytime_raining_data['num_filtered_scenes']

    # reform the format of scene list
    with open(output_path, 'w') as output_file:
        # write scenes of train set
        output_file.write('train = \ \n\t[')
        for i in range(num_train_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + train_scenes[i] + "'")
            if i != num_train_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')

        # write scenes of test set
        output_file.write('test = \ \n\t[')
        for i in range(num_test_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + test_scenes[i] + "'")
            if i != num_test_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')


def plan1(daytime_json, daytime_raining_json, output_path):
    """For Domain adaptation task.
    Train set: daytime in official trainval set(751 scenes),
    when training all the raining images' annotation will be deleted,
    19.8% of the train set is raining.

    Test set: daytime raining in official trainval set(149 scenes),
    when testing only use raining images.

    :param daytime_json: The json file saved daytime scenes
                         generated by filter_nuscenes.py
    :param daytime_raining_json: The json file saved daytime raining
                                 scenes generated by filter_nuscenes.py
    :param output_path: Path of output py file.
    :return: The output py file saved 2 scene list: train, test.
    """
    daytime_data = mmcv.load(daytime_json)
    daytime_raining_data = mmcv.load(daytime_raining_json)

    train_scenes = daytime_data['filtered_scenes']
    num_train_scenes = daytime_data['num_filtered_scenes']

    test_scenes = daytime_raining_data['filtered_scenes']
    num_test_scenes = daytime_raining_data['num_filtered_scenes']

    # reform the format of scene list
    with open(output_path, 'w') as output_file:
        # write scenes of train set
        output_file.write('train = \ \n\t[')
        for i in range(num_train_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + train_scenes[i] + "'")
            if i != num_train_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')

        # write scenes of test set
        output_file.write('test = \ \n\t[')
        for i in range(num_test_scenes):
            if i % 8 == 0 and i != 0:
                output_file.write('\n\t ')
            output_file.write("'" + test_scenes[i] + "'")
            if i != num_test_scenes - 1:
                output_file.write(', ')
            else:
                output_file.write(']\n\n')


if __name__ == '__main__':
    # split_scenes(json_path=r"E:/datasets/nuScenes/Full dataset (v1.0)/trainval/"
    #                        r"v1.0-trainval_include_['rain']_exclude_['after rain', 'night'].json",
    #              train_proportion=0.7,
    #              test_proportion=0.15)

    plan0(daytime_no_rain_json=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\v1.0-trainval_daytime_no_rain.json',
          daytime_raining_json=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\v1.0-trainval_daytime_raining.json',
          output_path=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\plan0.py')

    plan1(daytime_json=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\v1.0-trainval_daytime.json',
          daytime_raining_json=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\v1.0-trainval_daytime_raining.json',
          output_path=r'E:\datasets\nuScenes\Full dataset (v1.0)\trainval\plan1.py')

